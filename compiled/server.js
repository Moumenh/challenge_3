const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { User } = require('./models/Users');
const { Credit } = require('./models/Credits');
const { Address } = require('./models/Address');

const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(cors());

app.use(express.static(__dirname + '/./public'));

mongoose.connect('mongodb+srv://m0moooZ:momoftw1!@react-blog.pf36a.mongodb.net/Checkout?retryWrites=true&w=majority', {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

app.get('/app', (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/user', (req, res) => {
    console.log(req.body);
    let user = new User(req.body);
    user.save((err, user) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                user: user._id
            });
        }
    });
    res.json(req.body);
});

app.post('/address', (req, res) => {
    console.log(req.body);
    let address = new Address(req.body);
    address.save((err, address) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                address: address._id
            });
        }
    });
});

app.post('/credit', (req, res) => {
    console.log(req.body);
    let credit = new Credit(req.body);
    credit.save((err, credit) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                credit: credit._id
            });
        }
    });
});

app.listen(3000, () => {
    console.log('listening');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiY29ycyIsIlVzZXIiLCJDcmVkaXQiLCJBZGRyZXNzIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInN0YXRpYyIsIl9fZGlybmFtZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZEZpbGUiLCJwb3N0IiwiYm9keSIsInVzZXIiLCJzYXZlIiwic3RhdHVzIiwic2VuZCIsInN1Y2Nlc3MiLCJfaWQiLCJhZGRyZXNzIiwiY3JlZGl0IiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxXQUFXRCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxNQUFNRSxPQUFPRixRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU0sRUFBQ0csSUFBRCxLQUFTSCxRQUFRLGdCQUFSLENBQWY7QUFDQSxNQUFNLEVBQUNJLE1BQUQsS0FBV0osUUFBUSxrQkFBUixDQUFqQjtBQUNBLE1BQU0sRUFBQ0ssT0FBRCxLQUFZTCxRQUFRLGtCQUFSLENBQWxCOztBQUVBLE1BQU1NLE1BQU1QLFNBQVo7O0FBRUFPLElBQUlDLEdBQUosQ0FBUVIsUUFBUVMsVUFBUixDQUFtQixFQUFFQyxVQUFVLElBQVosRUFBbkIsQ0FBUjtBQUNBSCxJQUFJQyxHQUFKLENBQVFSLFFBQVFXLElBQVIsRUFBUjtBQUNBSixJQUFJQyxHQUFKLENBQVFMLE1BQVI7O0FBRUFJLElBQUlDLEdBQUosQ0FBUVIsUUFBUVksTUFBUixDQUFlQyxZQUFZLFdBQTNCLENBQVI7O0FBR0FYLFNBQVNZLE9BQVQsQ0FBaUIsbUdBQWpCLEVBQ0U7QUFDRUMscUJBQWlCLElBRG5CLEVBQ3lCQyxvQkFBb0IsSUFEN0M7QUFFRUMsb0JBQWdCLElBRmxCLEVBRXdCQyxrQkFBa0I7QUFGMUMsQ0FERixFQUtHQyxJQUxILENBS1EsTUFBTUMsUUFBUUMsR0FBUixDQUFZLHNCQUFaLENBTGQsRUFNR0MsS0FOSCxDQU1TQyxPQUFPSCxRQUFRQyxHQUFSLENBQVlFLEdBQVosQ0FOaEI7O0FBU0FoQixJQUFJaUIsR0FBSixDQUFRLE1BQVIsRUFBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWE7QUFDekJBLFFBQUlDLFFBQUosQ0FBYWQsWUFBVSwyQkFBdkI7QUFDSCxDQUZEOztBQUlBTixJQUFJcUIsSUFBSixDQUFTLE9BQVQsRUFBbUIsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDNUJOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJQyxPQUFPLElBQUkxQixJQUFKLENBQVNxQixJQUFJSSxJQUFiLENBQVg7QUFDQUMsU0FBS0MsSUFBTCxDQUFXLENBQUNSLEdBQUQsRUFBT08sSUFBUCxLQUFnQjtBQUN2QixZQUFHUCxHQUFILEVBQVE7QUFDSkcsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixRQUFyQjtBQUNILFNBRkQsTUFFTztBQUNIUCxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JyQixJQUFoQixDQUFxQjtBQUNqQnVCLHlCQUFVLElBRE87QUFFakJKLHNCQUFPQSxLQUFLSztBQUZLLGFBQXJCO0FBSUg7QUFDSixLQVREO0FBVUFULFFBQUlmLElBQUosQ0FBU2MsSUFBSUksSUFBYjtBQUVILENBZkQ7O0FBaUJBdEIsSUFBSXFCLElBQUosQ0FBUyxVQUFULEVBQXNCLENBQUNILEdBQUQsRUFBS0MsR0FBTCxLQUFhO0FBQy9CTixZQUFRQyxHQUFSLENBQVlJLElBQUlJLElBQWhCO0FBQ0EsUUFBSU8sVUFBVSxJQUFJOUIsT0FBSixDQUFZbUIsSUFBSUksSUFBaEIsQ0FBZDtBQUNBTyxZQUFRTCxJQUFSLENBQWEsQ0FBQ1IsR0FBRCxFQUFLYSxPQUFMLEtBQWlCO0FBQzFCLFlBQUdiLEdBQUgsRUFBTztBQUNIRyxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLFFBQXJCO0FBQ0gsU0FGRCxNQUVLO0FBQ0RQLGdCQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQnJCLElBQWhCLENBQXFCO0FBQ2pCdUIseUJBQVUsSUFETztBQUVqQkUseUJBQVVBLFFBQVFEO0FBRkQsYUFBckI7QUFJSDtBQUNKLEtBVEQ7QUFXSCxDQWREOztBQWdCQTVCLElBQUlxQixJQUFKLENBQVMsU0FBVCxFQUFxQixDQUFDSCxHQUFELEVBQUtDLEdBQUwsS0FBYTtBQUM5Qk4sWUFBUUMsR0FBUixDQUFZSSxJQUFJSSxJQUFoQjtBQUNBLFFBQUlRLFNBQVMsSUFBSWhDLE1BQUosQ0FBV29CLElBQUlJLElBQWYsQ0FBYjtBQUNBUSxXQUFPTixJQUFQLENBQVksQ0FBQ1IsR0FBRCxFQUFLYyxNQUFMLEtBQWdCO0FBQ3hCLFlBQUdkLEdBQUgsRUFBTztBQUNIRyxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLFFBQXJCO0FBQ0gsU0FGRCxNQUVLO0FBQ0RQLGdCQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQnJCLElBQWhCLENBQXFCO0FBQ2pCdUIseUJBQVUsSUFETztBQUVqQkcsd0JBQVNBLE9BQU9GO0FBRkMsYUFBckI7QUFJSDtBQUNKLEtBVEQ7QUFVSCxDQWJEOztBQWlCQTVCLElBQUkrQixNQUFKLENBQVcsSUFBWCxFQUFnQixNQUFJO0FBQ2hCbEIsWUFBUUMsR0FBUixDQUFZLFdBQVo7QUFDSCxDQUZEIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpXHJcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJylcclxuY29uc3Qge1VzZXJ9ID0gcmVxdWlyZSgnLi9tb2RlbHMvVXNlcnMnKVxyXG5jb25zdCB7Q3JlZGl0fSA9IHJlcXVpcmUoJy4vbW9kZWxzL0NyZWRpdHMnKVxyXG5jb25zdCB7QWRkcmVzc30gPSByZXF1aXJlKCcuL21vZGVscy9BZGRyZXNzJylcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxyXG5cclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcclxuYXBwLnVzZShleHByZXNzLmpzb24oKSlcclxuYXBwLnVzZShjb3JzKCkpXHJcblxyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSArICcvLi9wdWJsaWMnKSlcclxuXHJcblxyXG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiK3NydjovL20wbW9vb1o6bW9tb2Z0dzEhQHJlYWN0LWJsb2cucGYzNmEubW9uZ29kYi5uZXQvQ2hlY2tvdXQ/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5JyAsXHJcbiAge1xyXG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLCB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXHJcbiAgICB1c2VDcmVhdGVJbmRleDogdHJ1ZSwgdXNlRmluZEFuZE1vZGlmeTogZmFsc2VcclxuICB9KVxyXG4gIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdNb25nb0RCIENvbm5lY3RlZC4uLicpKVxyXG4gIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcclxuXHJcblxyXG5hcHAuZ2V0KCcvYXBwJywgKHJlcSwgcmVzKSA9PntcclxuICAgIHJlcy5zZW5kRmlsZShfX2Rpcm5hbWUrJy8uL2NvbXBpbGVkL2NsaWVudC9hcHAuanMnKTtcclxufSlcclxuXHJcbmFwcC5wb3N0KCcvdXNlcicgLCAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2cocmVxLmJvZHkpXHJcbiAgICBsZXQgdXNlciA9IG5ldyBVc2VyKHJlcS5ib2R5KVxyXG4gICAgdXNlci5zYXZlKCAoZXJyICwgdXNlcikgPT4ge1xyXG4gICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZCgnZmFpbGVkJylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHVzZXIgOiB1c2VyLl9pZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXMuanNvbihyZXEuYm9keSlcclxuICAgIFxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9hZGRyZXNzJyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCBhZGRyZXNzID0gbmV3IEFkZHJlc3MocmVxLmJvZHkpXHJcbiAgICBhZGRyZXNzLnNhdmUoKGVycixhZGRyZXNzKSA9PiB7XHJcbiAgICAgICAgaWYoZXJyKXtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoJ2ZhaWxlZCcpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYWRkcmVzcyA6IGFkZHJlc3MuX2lkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIFxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9jcmVkaXQnICwgKHJlcSxyZXMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxyXG4gICAgbGV0IGNyZWRpdCA9IG5ldyBDcmVkaXQocmVxLmJvZHkpXHJcbiAgICBjcmVkaXQuc2F2ZSgoZXJyLGNyZWRpdCkgPT4ge1xyXG4gICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKCdmYWlsZWQnKVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNyZWRpdCA6IGNyZWRpdC5faWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxuXHJcblxyXG5hcHAubGlzdGVuKDMwMDAsKCk9PntcclxuICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5pbmcnKVxyXG59KSJdfQ==