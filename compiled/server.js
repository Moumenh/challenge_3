const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { User } = require('./models/Users');
const { Credit } = require('./models/Credits');
const { Address } = require('./models/Address');

const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(cors());

app.use(express.static(__dirname + '/./public'));

mongoose.connect('mongodb+srv://m0moooZ:momoftw1!@react-blog.pf36a.mongodb.net/Checkout?retryWrites=true&w=majority', {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

app.get('/app', (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/user', (req, res) => {
    console.log(req.body);
    let user = new User(req.body);
    user.save((err, user) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                user: user._id
            });
        }
    });
    // res.json(req.body)
});

app.post('/address', (req, res) => {
    console.log(req.body);
    let address = new Address(req.body);
    address.save((err, address) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                address: address._id
            });
        }
    });
});

app.post('/credit', (req, res) => {
    console.log(req.body);
    let credit = new Credit(req.body);
    credit.save((err, credit) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                credit: credit._id
            });
        }
    });
});

app.listen(3000, () => {
    console.log('listening');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiY29ycyIsIlVzZXIiLCJDcmVkaXQiLCJBZGRyZXNzIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInN0YXRpYyIsIl9fZGlybmFtZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZEZpbGUiLCJwb3N0IiwiYm9keSIsInVzZXIiLCJzYXZlIiwic3RhdHVzIiwic2VuZCIsInN1Y2Nlc3MiLCJfaWQiLCJhZGRyZXNzIiwiY3JlZGl0IiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxXQUFXRCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxNQUFNRSxPQUFPRixRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU0sRUFBQ0csSUFBRCxLQUFTSCxRQUFRLGdCQUFSLENBQWY7QUFDQSxNQUFNLEVBQUNJLE1BQUQsS0FBV0osUUFBUSxrQkFBUixDQUFqQjtBQUNBLE1BQU0sRUFBQ0ssT0FBRCxLQUFZTCxRQUFRLGtCQUFSLENBQWxCOztBQUVBLE1BQU1NLE1BQU1QLFNBQVo7O0FBRUFPLElBQUlDLEdBQUosQ0FBUVIsUUFBUVMsVUFBUixDQUFtQixFQUFFQyxVQUFVLElBQVosRUFBbkIsQ0FBUjtBQUNBSCxJQUFJQyxHQUFKLENBQVFSLFFBQVFXLElBQVIsRUFBUjtBQUNBSixJQUFJQyxHQUFKLENBQVFMLE1BQVI7O0FBRUFJLElBQUlDLEdBQUosQ0FBUVIsUUFBUVksTUFBUixDQUFlQyxZQUFZLFdBQTNCLENBQVI7O0FBR0FYLFNBQVNZLE9BQVQsQ0FBaUIsbUdBQWpCLEVBQ0U7QUFDRUMscUJBQWlCLElBRG5CLEVBQ3lCQyxvQkFBb0IsSUFEN0M7QUFFRUMsb0JBQWdCLElBRmxCLEVBRXdCQyxrQkFBa0I7QUFGMUMsQ0FERixFQUtHQyxJQUxILENBS1EsTUFBTUMsUUFBUUMsR0FBUixDQUFZLHNCQUFaLENBTGQsRUFNR0MsS0FOSCxDQU1TQyxPQUFPSCxRQUFRQyxHQUFSLENBQVlFLEdBQVosQ0FOaEI7O0FBU0FoQixJQUFJaUIsR0FBSixDQUFRLE1BQVIsRUFBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWE7QUFDekJBLFFBQUlDLFFBQUosQ0FBYWQsWUFBVSwyQkFBdkI7QUFDSCxDQUZEOztBQUlBTixJQUFJcUIsSUFBSixDQUFTLE9BQVQsRUFBbUIsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDNUJOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJQyxPQUFPLElBQUkxQixJQUFKLENBQVNxQixJQUFJSSxJQUFiLENBQVg7QUFDQUMsU0FBS0MsSUFBTCxDQUFXLENBQUNSLEdBQUQsRUFBT08sSUFBUCxLQUFnQjtBQUN2QixZQUFHUCxHQUFILEVBQVE7QUFDSkcsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixRQUFyQjtBQUNILFNBRkQsTUFFTztBQUNIUCxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JyQixJQUFoQixDQUFxQjtBQUNqQnVCLHlCQUFVLElBRE87QUFFakJKLHNCQUFPQSxLQUFLSztBQUZLLGFBQXJCO0FBSUg7QUFDSixLQVREO0FBVUE7QUFFSCxDQWZEOztBQWlCQTVCLElBQUlxQixJQUFKLENBQVMsVUFBVCxFQUFzQixDQUFDSCxHQUFELEVBQUtDLEdBQUwsS0FBYTtBQUMvQk4sWUFBUUMsR0FBUixDQUFZSSxJQUFJSSxJQUFoQjtBQUNBLFFBQUlPLFVBQVUsSUFBSTlCLE9BQUosQ0FBWW1CLElBQUlJLElBQWhCLENBQWQ7QUFDQU8sWUFBUUwsSUFBUixDQUFhLENBQUNSLEdBQUQsRUFBS2EsT0FBTCxLQUFpQjtBQUMxQixZQUFHYixHQUFILEVBQU87QUFDSEcsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixRQUFyQjtBQUNILFNBRkQsTUFFSztBQUNEUCxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JyQixJQUFoQixDQUFxQjtBQUNqQnVCLHlCQUFVLElBRE87QUFFakJFLHlCQUFVQSxRQUFRRDtBQUZELGFBQXJCO0FBSUg7QUFDSixLQVREO0FBV0gsQ0FkRDs7QUFnQkE1QixJQUFJcUIsSUFBSixDQUFTLFNBQVQsRUFBcUIsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDOUJOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJUSxTQUFTLElBQUloQyxNQUFKLENBQVdvQixJQUFJSSxJQUFmLENBQWI7QUFDQVEsV0FBT04sSUFBUCxDQUFZLENBQUNSLEdBQUQsRUFBS2MsTUFBTCxLQUFnQjtBQUN4QixZQUFHZCxHQUFILEVBQU87QUFDSEcsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixRQUFyQjtBQUNILFNBRkQsTUFFSztBQUNEUCxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JyQixJQUFoQixDQUFxQjtBQUNqQnVCLHlCQUFVLElBRE87QUFFakJHLHdCQUFTQSxPQUFPRjtBQUZDLGFBQXJCO0FBSUg7QUFDSixLQVREO0FBVUgsQ0FiRDs7QUFpQkE1QixJQUFJK0IsTUFBSixDQUFXLElBQVgsRUFBZ0IsTUFBSTtBQUNoQmxCLFlBQVFDLEdBQVIsQ0FBWSxXQUFaO0FBQ0gsQ0FGRCIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpXHJcbmNvbnN0IHtVc2VyfSA9IHJlcXVpcmUoJy4vbW9kZWxzL1VzZXJzJylcclxuY29uc3Qge0NyZWRpdH0gPSByZXF1aXJlKCcuL21vZGVscy9DcmVkaXRzJylcclxuY29uc3Qge0FkZHJlc3N9ID0gcmVxdWlyZSgnLi9tb2RlbHMvQWRkcmVzcycpXHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKClcclxuXHJcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcbmFwcC51c2UoY29ycygpKVxyXG5cclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnLy4vcHVibGljJykpXHJcblxyXG5cclxubW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYitzcnY6Ly9tMG1vb29aOm1vbW9mdHcxIUByZWFjdC1ibG9nLnBmMzZhLm1vbmdvZGIubmV0L0NoZWNrb3V0P3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eScgLFxyXG4gIHtcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG4gICAgdXNlQ3JlYXRlSW5kZXg6IHRydWUsIHVzZUZpbmRBbmRNb2RpZnk6IGZhbHNlXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTW9uZ29EQiBDb25uZWN0ZWQuLi4nKSlcclxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcblxyXG5cclxuYXBwLmdldCgnL2FwcCcsIChyZXEsIHJlcykgPT57XHJcbiAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lKycvLi9jb21waWxlZC9jbGllbnQvYXBwLmpzJyk7XHJcbn0pXHJcblxyXG5hcHAucG9zdCgnL3VzZXInICwgKHJlcSxyZXMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxyXG4gICAgbGV0IHVzZXIgPSBuZXcgVXNlcihyZXEuYm9keSlcclxuICAgIHVzZXIuc2F2ZSggKGVyciAsIHVzZXIpID0+IHtcclxuICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoJ2ZhaWxlZCcpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB1c2VyIDogdXNlci5faWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgLy8gcmVzLmpzb24ocmVxLmJvZHkpXHJcbiAgICBcclxufSlcclxuXHJcbmFwcC5wb3N0KCcvYWRkcmVzcycgLCAocmVxLHJlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2cocmVxLmJvZHkpXHJcbiAgICBsZXQgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKHJlcS5ib2R5KVxyXG4gICAgYWRkcmVzcy5zYXZlKChlcnIsYWRkcmVzcykgPT4ge1xyXG4gICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKCdmYWlsZWQnKVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFkZHJlc3MgOiBhZGRyZXNzLl9pZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBcclxufSlcclxuXHJcbmFwcC5wb3N0KCcvY3JlZGl0JyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCBjcmVkaXQgPSBuZXcgQ3JlZGl0KHJlcS5ib2R5KVxyXG4gICAgY3JlZGl0LnNhdmUoKGVycixjcmVkaXQpID0+IHtcclxuICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZCgnZmFpbGVkJylcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjcmVkaXQgOiBjcmVkaXQuX2lkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSlcclxuXHJcblxyXG5cclxuYXBwLmxpc3RlbigzMDAwLCgpPT57XHJcbiAgICBjb25zb2xlLmxvZygnbGlzdGVuaW5nJylcclxufSkiXX0=