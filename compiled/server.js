const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { User } = require('./models/Users');
const { Credit } = require('./models/Credits');
const { Address } = require('./models/Address');

const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(cors());

app.use(express.static(__dirname + '/./public'));

mongoose.connect('mongodb+srv://m0moooZ:momoftw1!@react-blog.pf36a.mongodb.net/Checkout?retryWrites=true&w=majority', {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

app.get('/app', (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/user', (req, res) => {
    console.log(req.body);
    let user = new User();
    res.send('done');
});

app.post('/address', (req, res) => {
    console.log(req.body);
    let address = new Address();
    res.send('done');
});

app.post('/credit', (req, res) => {
    console.log(req.body);
    let credit = new Credit();
    res.send('done');
});

app.listen(3000, () => {
    console.log('listening');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiY29ycyIsIlVzZXIiLCJDcmVkaXQiLCJBZGRyZXNzIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInN0YXRpYyIsIl9fZGlybmFtZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZEZpbGUiLCJwb3N0IiwiYm9keSIsInVzZXIiLCJzZW5kIiwiYWRkcmVzcyIsImNyZWRpdCIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsTUFBTUMsV0FBV0QsUUFBUSxVQUFSLENBQWpCO0FBQ0EsTUFBTUUsT0FBT0YsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNLEVBQUNHLElBQUQsS0FBU0gsUUFBUSxnQkFBUixDQUFmO0FBQ0EsTUFBTSxFQUFDSSxNQUFELEtBQVdKLFFBQVEsa0JBQVIsQ0FBakI7QUFDQSxNQUFNLEVBQUNLLE9BQUQsS0FBWUwsUUFBUSxrQkFBUixDQUFsQjs7QUFFQSxNQUFNTSxNQUFNUCxTQUFaOztBQUVBTyxJQUFJQyxHQUFKLENBQVFSLFFBQVFTLFVBQVIsQ0FBbUIsRUFBRUMsVUFBVSxJQUFaLEVBQW5CLENBQVI7QUFDQUgsSUFBSUMsR0FBSixDQUFRUixRQUFRVyxJQUFSLEVBQVI7QUFDQUosSUFBSUMsR0FBSixDQUFRTCxNQUFSOztBQUVBSSxJQUFJQyxHQUFKLENBQVFSLFFBQVFZLE1BQVIsQ0FBZUMsWUFBWSxXQUEzQixDQUFSOztBQUdBWCxTQUFTWSxPQUFULENBQWlCLG1HQUFqQixFQUNFO0FBQ0VDLHFCQUFpQixJQURuQixFQUN5QkMsb0JBQW9CLElBRDdDO0FBRUVDLG9CQUFnQixJQUZsQixFQUV3QkMsa0JBQWtCO0FBRjFDLENBREYsRUFLR0MsSUFMSCxDQUtRLE1BQU1DLFFBQVFDLEdBQVIsQ0FBWSxzQkFBWixDQUxkLEVBTUdDLEtBTkgsQ0FNU0MsT0FBT0gsUUFBUUMsR0FBUixDQUFZRSxHQUFaLENBTmhCOztBQVNBaEIsSUFBSWlCLEdBQUosQ0FBUSxNQUFSLEVBQWdCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFhO0FBQ3pCQSxRQUFJQyxRQUFKLENBQWFkLFlBQVUsMkJBQXZCO0FBQ0gsQ0FGRDs7QUFJQU4sSUFBSXFCLElBQUosQ0FBUyxPQUFULEVBQW1CLENBQUNILEdBQUQsRUFBS0MsR0FBTCxLQUFhO0FBQzVCTixZQUFRQyxHQUFSLENBQVlJLElBQUlJLElBQWhCO0FBQ0EsUUFBSUMsT0FBTyxJQUFJMUIsSUFBSixFQUFYO0FBQ0FzQixRQUFJSyxJQUFKLENBQVMsTUFBVDtBQUNILENBSkQ7O0FBTUF4QixJQUFJcUIsSUFBSixDQUFTLFVBQVQsRUFBc0IsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDL0JOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJRyxVQUFVLElBQUkxQixPQUFKLEVBQWQ7QUFDQW9CLFFBQUlLLElBQUosQ0FBUyxNQUFUO0FBQ0gsQ0FKRDs7QUFNQXhCLElBQUlxQixJQUFKLENBQVMsU0FBVCxFQUFxQixDQUFDSCxHQUFELEVBQUtDLEdBQUwsS0FBYTtBQUM5Qk4sWUFBUUMsR0FBUixDQUFZSSxJQUFJSSxJQUFoQjtBQUNBLFFBQUlJLFNBQVMsSUFBSTVCLE1BQUosRUFBYjtBQUNBcUIsUUFBSUssSUFBSixDQUFTLE1BQVQ7QUFDSCxDQUpEOztBQVFBeEIsSUFBSTJCLE1BQUosQ0FBVyxJQUFYLEVBQWdCLE1BQUk7QUFDaEJkLFlBQVFDLEdBQVIsQ0FBWSxXQUFaO0FBQ0gsQ0FGRCIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxyXG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpXHJcbmNvbnN0IHtVc2VyfSA9IHJlcXVpcmUoJy4vbW9kZWxzL1VzZXJzJylcclxuY29uc3Qge0NyZWRpdH0gPSByZXF1aXJlKCcuL21vZGVscy9DcmVkaXRzJylcclxuY29uc3Qge0FkZHJlc3N9ID0gcmVxdWlyZSgnLi9tb2RlbHMvQWRkcmVzcycpXHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKClcclxuXHJcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcbmFwcC51c2UoY29ycygpKVxyXG5cclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnLy4vcHVibGljJykpXHJcblxyXG5cclxubW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYitzcnY6Ly9tMG1vb29aOm1vbW9mdHcxIUByZWFjdC1ibG9nLnBmMzZhLm1vbmdvZGIubmV0L0NoZWNrb3V0P3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eScgLFxyXG4gIHtcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG4gICAgdXNlQ3JlYXRlSW5kZXg6IHRydWUsIHVzZUZpbmRBbmRNb2RpZnk6IGZhbHNlXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTW9uZ29EQiBDb25uZWN0ZWQuLi4nKSlcclxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcblxyXG5cclxuYXBwLmdldCgnL2FwcCcsIChyZXEsIHJlcykgPT57XHJcbiAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lKycvLi9jb21waWxlZC9jbGllbnQvYXBwLmpzJyk7XHJcbn0pXHJcblxyXG5hcHAucG9zdCgnL3VzZXInICwgKHJlcSxyZXMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxyXG4gICAgbGV0IHVzZXIgPSBuZXcgVXNlclxyXG4gICAgcmVzLnNlbmQoJ2RvbmUnKVxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9hZGRyZXNzJyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCBhZGRyZXNzID0gbmV3IEFkZHJlc3NcclxuICAgIHJlcy5zZW5kKCdkb25lJylcclxufSlcclxuXHJcbmFwcC5wb3N0KCcvY3JlZGl0JyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCBjcmVkaXQgPSBuZXcgQ3JlZGl0XHJcbiAgICByZXMuc2VuZCgnZG9uZScpXHJcbn0pXHJcblxyXG5cclxuXHJcbmFwcC5saXN0ZW4oMzAwMCwoKT0+e1xyXG4gICAgY29uc29sZS5sb2coJ2xpc3RlbmluZycpXHJcbn0pIl19