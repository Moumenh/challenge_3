const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { User } = require('./models/Users');
const { Credit } = require('./models/Credits');
const { Address } = require('./models/Address');

const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(cors());

app.use(express.static(__dirname + '/./public'));

mongoose.connect('mongodb+srv://m0moooZ:momoftw1!@react-blog.pf36a.mongodb.net/Checkout?retryWrites=true&w=majority', {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

app.get('/app', (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/user', (req, res) => {
    console.log(req.body);
    let user = new User(req.body);
    user.save((err, user) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                user: user._id
            });
        }
    });
});

app.post('/address', (req, res) => {
    console.log(req.body);
    let address = new Address(req.body);
    address.save((err, address) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                address: address._id
            });
        }
    });
});

app.post('/credit', (req, res) => {
    console.log(req.body);
    let credit = new Credit(req.body);
    credit.save((err, credit) => {
        if (err) {
            res.status(404).send('failed');
        } else {
            res.status(201).json({
                success: true,
                credit: credit._id
            });
        }
    });
});

app.listen(3000, () => {
    console.log('listening');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiY29ycyIsIlVzZXIiLCJDcmVkaXQiLCJBZGRyZXNzIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInN0YXRpYyIsIl9fZGlybmFtZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZEZpbGUiLCJwb3N0IiwiYm9keSIsInVzZXIiLCJzYXZlIiwic3RhdHVzIiwic2VuZCIsInN1Y2Nlc3MiLCJfaWQiLCJhZGRyZXNzIiwiY3JlZGl0IiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxXQUFXRCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxNQUFNRSxPQUFPRixRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU0sRUFBQ0csSUFBRCxLQUFTSCxRQUFRLGdCQUFSLENBQWY7QUFDQSxNQUFNLEVBQUNJLE1BQUQsS0FBV0osUUFBUSxrQkFBUixDQUFqQjtBQUNBLE1BQU0sRUFBQ0ssT0FBRCxLQUFZTCxRQUFRLGtCQUFSLENBQWxCOztBQUVBLE1BQU1NLE1BQU1QLFNBQVo7O0FBRUFPLElBQUlDLEdBQUosQ0FBUVIsUUFBUVMsVUFBUixDQUFtQixFQUFFQyxVQUFVLElBQVosRUFBbkIsQ0FBUjtBQUNBSCxJQUFJQyxHQUFKLENBQVFSLFFBQVFXLElBQVIsRUFBUjtBQUNBSixJQUFJQyxHQUFKLENBQVFMLE1BQVI7O0FBRUFJLElBQUlDLEdBQUosQ0FBUVIsUUFBUVksTUFBUixDQUFlQyxZQUFZLFdBQTNCLENBQVI7O0FBR0FYLFNBQVNZLE9BQVQsQ0FBaUIsbUdBQWpCLEVBQ0U7QUFDRUMscUJBQWlCLElBRG5CLEVBQ3lCQyxvQkFBb0IsSUFEN0M7QUFFRUMsb0JBQWdCLElBRmxCLEVBRXdCQyxrQkFBa0I7QUFGMUMsQ0FERixFQUtHQyxJQUxILENBS1EsTUFBTUMsUUFBUUMsR0FBUixDQUFZLHNCQUFaLENBTGQsRUFNR0MsS0FOSCxDQU1TQyxPQUFPSCxRQUFRQyxHQUFSLENBQVlFLEdBQVosQ0FOaEI7O0FBU0FoQixJQUFJaUIsR0FBSixDQUFRLE1BQVIsRUFBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWE7QUFDekJBLFFBQUlDLFFBQUosQ0FBYWQsWUFBVSwyQkFBdkI7QUFDSCxDQUZEOztBQUlBTixJQUFJcUIsSUFBSixDQUFTLE9BQVQsRUFBbUIsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDNUJOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJQyxPQUFPLElBQUkxQixJQUFKLENBQVNxQixJQUFJSSxJQUFiLENBQVg7QUFDQUMsU0FBS0MsSUFBTCxDQUFXLENBQUNSLEdBQUQsRUFBT08sSUFBUCxLQUFnQjtBQUN2QixZQUFHUCxHQUFILEVBQVE7QUFDSkcsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixRQUFyQjtBQUNILFNBRkQsTUFFTztBQUNIUCxnQkFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JyQixJQUFoQixDQUFxQjtBQUNqQnVCLHlCQUFVLElBRE87QUFFakJKLHNCQUFPQSxLQUFLSztBQUZLLGFBQXJCO0FBSUg7QUFDSixLQVREO0FBV0gsQ0FkRDs7QUFnQkE1QixJQUFJcUIsSUFBSixDQUFTLFVBQVQsRUFBc0IsQ0FBQ0gsR0FBRCxFQUFLQyxHQUFMLEtBQWE7QUFDL0JOLFlBQVFDLEdBQVIsQ0FBWUksSUFBSUksSUFBaEI7QUFDQSxRQUFJTyxVQUFVLElBQUk5QixPQUFKLENBQVltQixJQUFJSSxJQUFoQixDQUFkO0FBQ0FPLFlBQVFMLElBQVIsQ0FBYSxDQUFDUixHQUFELEVBQUthLE9BQUwsS0FBaUI7QUFDMUIsWUFBR2IsR0FBSCxFQUFPO0FBQ0hHLGdCQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsUUFBckI7QUFDSCxTQUZELE1BRUs7QUFDRFAsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCckIsSUFBaEIsQ0FBcUI7QUFDakJ1Qix5QkFBVSxJQURPO0FBRWpCRSx5QkFBVUEsUUFBUUQ7QUFGRCxhQUFyQjtBQUlIO0FBQ0osS0FURDtBQVdILENBZEQ7O0FBZ0JBNUIsSUFBSXFCLElBQUosQ0FBUyxTQUFULEVBQXFCLENBQUNILEdBQUQsRUFBS0MsR0FBTCxLQUFhO0FBQzlCTixZQUFRQyxHQUFSLENBQVlJLElBQUlJLElBQWhCO0FBQ0EsUUFBSVEsU0FBUyxJQUFJaEMsTUFBSixDQUFXb0IsSUFBSUksSUFBZixDQUFiO0FBQ0FRLFdBQU9OLElBQVAsQ0FBWSxDQUFDUixHQUFELEVBQUtjLE1BQUwsS0FBZ0I7QUFDeEIsWUFBR2QsR0FBSCxFQUFPO0FBQ0hHLGdCQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsUUFBckI7QUFDSCxTQUZELE1BRUs7QUFDRFAsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCckIsSUFBaEIsQ0FBcUI7QUFDakJ1Qix5QkFBVSxJQURPO0FBRWpCRyx3QkFBU0EsT0FBT0Y7QUFGQyxhQUFyQjtBQUlIO0FBQ0osS0FURDtBQVVILENBYkQ7O0FBaUJBNUIsSUFBSStCLE1BQUosQ0FBVyxJQUFYLEVBQWdCLE1BQUk7QUFDaEJsQixZQUFRQyxHQUFSLENBQVksV0FBWjtBQUNILENBRkQiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJylcclxuY29uc3QgY29ycyA9IHJlcXVpcmUoJ2NvcnMnKVxyXG5jb25zdCB7VXNlcn0gPSByZXF1aXJlKCcuL21vZGVscy9Vc2VycycpXHJcbmNvbnN0IHtDcmVkaXR9ID0gcmVxdWlyZSgnLi9tb2RlbHMvQ3JlZGl0cycpXHJcbmNvbnN0IHtBZGRyZXNzfSA9IHJlcXVpcmUoJy4vbW9kZWxzL0FkZHJlc3MnKVxyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpXHJcblxyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxyXG5hcHAudXNlKGNvcnMoKSlcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoX19kaXJuYW1lICsgJy8uL3B1YmxpYycpKVxyXG5cclxuXHJcbm1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGIrc3J2Oi8vbTBtb29vWjptb21vZnR3MSFAcmVhY3QtYmxvZy5wZjM2YS5tb25nb2RiLm5ldC9DaGVja291dD9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHknICxcclxuICB7XHJcbiAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcclxuICAgIHVzZUNyZWF0ZUluZGV4OiB0cnVlLCB1c2VGaW5kQW5kTW9kaWZ5OiBmYWxzZVxyXG4gIH0pXHJcbiAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ01vbmdvREIgQ29ubmVjdGVkLi4uJykpXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG5cclxuXHJcbmFwcC5nZXQoJy9hcHAnLCAocmVxLCByZXMpID0+e1xyXG4gICAgcmVzLnNlbmRGaWxlKF9fZGlybmFtZSsnLy4vY29tcGlsZWQvY2xpZW50L2FwcC5qcycpO1xyXG59KVxyXG5cclxuYXBwLnBvc3QoJy91c2VyJyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCB1c2VyID0gbmV3IFVzZXIocmVxLmJvZHkpXHJcbiAgICB1c2VyLnNhdmUoIChlcnIgLCB1c2VyKSA9PiB7XHJcbiAgICAgICAgaWYoZXJyKSB7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKCdmYWlsZWQnKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlciA6IHVzZXIuX2lkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIFxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9hZGRyZXNzJyAsIChyZXEscmVzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEuYm9keSlcclxuICAgIGxldCBhZGRyZXNzID0gbmV3IEFkZHJlc3MocmVxLmJvZHkpXHJcbiAgICBhZGRyZXNzLnNhdmUoKGVycixhZGRyZXNzKSA9PiB7XHJcbiAgICAgICAgaWYoZXJyKXtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoJ2ZhaWxlZCcpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYWRkcmVzcyA6IGFkZHJlc3MuX2lkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIFxyXG59KVxyXG5cclxuYXBwLnBvc3QoJy9jcmVkaXQnICwgKHJlcSxyZXMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxyXG4gICAgbGV0IGNyZWRpdCA9IG5ldyBDcmVkaXQocmVxLmJvZHkpXHJcbiAgICBjcmVkaXQuc2F2ZSgoZXJyLGNyZWRpdCkgPT4ge1xyXG4gICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKCdmYWlsZWQnKVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNyZWRpdCA6IGNyZWRpdC5faWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KVxyXG5cclxuXHJcblxyXG5hcHAubGlzdGVuKDMwMDAsKCk9PntcclxuICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5pbmcnKVxyXG59KSJdfQ==